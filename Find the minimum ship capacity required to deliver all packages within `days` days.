class Solution {
    public int shipWithinDays(int[] weights, int days) {
        /** 
         * üìå How it Works Step-by-Step?
         * 
         * 1Ô∏è‚É£ Defining the Search Space:
         * - The ship's minimum capacity must be at least the heaviest package (max(weights)), 
         *   because the ship must be able to carry any single package.
         * - The maximum capacity is the sum of all package weights (sum(weights)) 
         *   because, in the worst case, we use a single day to ship everything.
         * 
         * 2Ô∏è‚É£ Binary Search Ensures Optimal Capacity:
         * - If mid (capacity) is too small:
         *   ‚û° Some days will need more than `days`, meaning the capacity is insufficient.
         *   ‚úÖ Solution: Increase `low = mid + 1` to try a larger capacity.
         * - If mid (capacity) is sufficient:
         *   ‚û° We check if we can ship within `days`.
         *   ‚úÖ If yes, we try a smaller ship capacity (`high = mid - 1`) to find the smallest valid one.
         * 
         * 3Ô∏è‚É£ Why It Guarantees the Smallest Capacity?
         * - We always move toward the smallest valid answer because whenever a ship capacity is valid, 
         *   we continue searching for a smaller possible capacity.
         * - Binary search stops at the lowest feasible ship capacity.
         */

        // üîπ Step 1Ô∏è‚É£: Define the Search Space
        int maxWeight = Integer.MIN_VALUE;
        int totalWeight = 0;

        for (int weight : weights) {
            maxWeight = Math.max(maxWeight, weight); // Get the heaviest package
            totalWeight += weight; // Get the total sum of all packages
        }

        int low = maxWeight;  // Heaviest package (minimum ship capacity)
        int high = totalWeight; // Total sum (worst-case ship capacity)

        // üîπ Step 2Ô∏è‚É£: Apply Binary Search on Ship Capacity
        while (low <= high) {
            int midCapacity = (low + high) / 2;

            if (canShipWithinDays(weights, midCapacity, days)) {
                // ‚úÖ If current capacity works, try finding a smaller valid capacity
                high = midCapacity - 1;
            } else {
                // ‚ùå If current capacity is too small, increase it
                low = midCapacity + 1;
            }
        }

        // üîπ Step 3Ô∏è‚É£: Return the minimum ship capacity that works
        return low;
    }

    private boolean canShipWithinDays(int[] weights, int shipCapacity, int days) {
        /**
         * üîπ This function checks if we can ship all packages within 'days' using 'shipCapacity'.
         * - If adding the next package exceeds 'shipCapacity', we start a new day.
         * - We count how many days are needed to ship all packages.
         * - If days needed ‚â§ given days, then 'shipCapacity' is sufficient.
         */

        int requiredDays = 1; // At least one day is needed
        int currentLoad = 0; // Track the weight of packages in the current trip

        for (int weight : weights) {
            if (currentLoad + weight > shipCapacity) {
                // Start a new day when the current capacity is exceeded
                requiredDays++;
                currentLoad = weight;
            } else {
                // Continue adding packages for the same day
                currentLoad += weight;
            }
        }

        return requiredDays <= days; // True if we can ship within the given days
    }
}
